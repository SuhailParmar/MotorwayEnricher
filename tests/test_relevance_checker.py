from lib.relevance_checker import RelevanceChecker

test_tweet = {
    "closest_cities": [
        "Stafford (N)",
        "Stoke / Newcastle-u-Lyme"
    ],
    "direction": "n",
    "extra_information": [],
    "id": 1052482906797428736,
    "junction": [
        14,
        15
    ],
    "metadata": "Event Generated by Tweet Miner at 2018-10-20T20:50:12.286910",
    "motorway": 6,
    "reason": "congestion",
    "time_day_numerical": 17,
    "time_day_worded": "Wed",
    "time_hour": 8,
    "time_minutes": 54,
    "time_seconds": 13,
    "time_timestamp": "2018-10-17T08:54:13",
    "time_year": 2018
}


class TestRelevanceChecker:

    rc = RelevanceChecker()
    mwjs, oi = rc.create_eng_keywords_from_tweet(test_tweet)

    def test_relevant_direction(self):

        tweet_gathered = [
            'travel: very slow traffic due to lorry tyre on the road earlier on m25 clockwise from j8 a217 brighton road (reigat… ',
            'travel: very slow traffic due to lorry tyre on the road earlier on m25 anti-clockwise from j8 a217 brighton road (reigat… '
        ]

        assert self.rc.is_relevant_direction(
            "c", tweet_gathered[0]) is True

        assert self.rc.is_relevant_direction(
            "a", tweet_gathered[0]) is False

        assert self.rc.is_relevant_direction(
            "a", tweet_gathered[1]) is True

        assert self.rc.is_relevant_direction(
            "c", tweet_gathered[1]) is False

    def test_create_keywords(self):

        print(self.mwjs)

        assert self.mwjs[0] == "M6"
        assert len(self.mwjs) == 3
        assert self.mwjs[1] == 'J14'
        assert self.mwjs[2] == 'J15'

    def test_find_relevant_tweets(self):

        t1 = "m6 J10 northbound crash!"
        t2 = " m6 J10 southbound crash!"

        assert not self.rc.is_relevant_direction("southbound", t1)
        assert not self.rc.is_relevant_direction("northbound", t2)

