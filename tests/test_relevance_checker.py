from lib.relevance_checker import RelevanceChecker

test_tweet = {
    "closest_cities": [
        "Stafford (N)",
        "Stoke / Newcastle-u-Lyme"
    ],
    "direction": "n",
    "extra_information": [],
    "id": 1052482906797428736,
    "junction": [
        14,
        15
    ],
    "metadata": "Event Generated by Tweet Miner at 2018-10-20T20:50:12.286910",
    "motorway": 6,
    "reason": "congestion",
    "time_day_numerical": 17,
    "time_day_worded": "Wed",
    "time_hour": 8,
    "time_minutes": 54,
    "time_seconds": 13,
    "time_timestamp": "2018-10-17T08:54:13",
    "time_year": 2018
}


class TestRelevanceChecker:

    rc = RelevanceChecker()

    def test_construct_words_from_tweet(self):
        a = self.rc.construct_words_from_tweet(test_tweet, [])
        assert a.__contains__('motorway')
        assert a.__contains__('junction 14')
        assert a.__contains__('j14')
        assert a.__contains__('Stoke')

    def test_finds_relevant_motorway_tweets(self):
        kws = ["M6", "congestion", "traffic"]
        tweets = [
            "Hello there is congestion on the M6",
            "There is traffic on the M5",
            "Not relevant at all M3"
        ]

        rt = self.rc.find_relevant_tweets(kws, tweets)
        assert len(rt) == 1
        assert rt.__contains__("Hello there is congestion on the M6")

    def test_find_relevant_tweets(self):
        kws = ["M6", "congestion", "traffic"]
        tweets = [
            "There is traffic on the M5",
            "Not relevant at all",
            "Hello there is an accident on the M6"
        ]

        rt = self.rc.find_relevant_tweets(kws, tweets)

        assert len(rt) == 1
        assert rt.__contains__("Hello there is an accident on the M6")
