from lib.relevance_checker import RelevanceChecker

test_tweet = {
    "closest_cities": [
        "Stafford (N)",
        "Stoke / Newcastle-u-Lyme"
    ],
    "direction": "n",
    "extra_information": [],
    "id": 1052482906797428736,
    "junction": [
        14,
        15
    ],
    "metadata": "Event Generated by Tweet Miner at 2018-10-20T20:50:12.286910",
    "motorway": 6,
    "reason": "congestion",
    "time_day_numerical": 17,
    "time_day_worded": "Wed",
    "time_hour": 8,
    "time_minutes": 54,
    "time_seconds": 13,
    "time_timestamp": "2018-10-17T08:54:13",
    "time_year": 2018
}


class TestRelevanceChecker:

    rc = RelevanceChecker()
    kws = ["m6", "j12", "congestion", "traffic"]
    tokenized_tweets = [
        ["m6", "is", "busy", "at", "j12"],
        ["hello there is congestion on the m60 around j12"],
        ["busy", "is", "m60"],
        ["not", "relevant", "at", "all", "M3"]
    ]

    def test_construct_words_from_tweet(self):
        a = self.rc.construct_words_from_tweet(test_tweet, [])
        assert a[0] == 'm6'
        assert a[1] == 'j12'

        assert a.__contains__('motorway')
        assert a.__contains__('junction 14')
        assert a.__contains__('j14')
        assert a.__contains__('Stoke')

    def test_filter_out_m60_only_m6(self):
        rt = self.rc.find_relevant_tweets(self.kws, self.tokenized_tweets)
        assert len(rt) == 1
        assert rt.__contains__(["m6", "is", "busy", "at", "j12"])

    def test_exceeded_bound_for_categorising_tweets(self):
        """
        If there are more than (bound) tweets directly referencing the motorway
        and junction in question use them, as opposed to tweets without referencing
        that junction.
        """

        tweets = [
            ["m6", "is", "busy", "at", "j12"],  # 1
            ["m6", "is", "congested", "at", "j12"],  # 2
            ["m6", "is", "reallybusy", "at", "j12"],  # 3
            ["m6", "is", "buzy", "at", "j12"],  # 4
            ["m6", "is", "amd", "at", "j12"],  # 5
            ["hello there is congestion on the",  "m60", "around j12"],
            ["not", "relevant", "at", "all", "M3"],
            ["busy", "is", "m6"]  # 6 should be ignored
        ]

        rt = self.rc.find_relevant_tweets(
            self.kws, tweets, bound=5)

        assert len(rt) == 5
